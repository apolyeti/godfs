// package data_node is responsible for storing and retrieving file data chunks.
// This is meant to be run on multiple nodes to distribute the storage of file data.

package data_node

const chunkSize = 4 * 1024 * 1024

// DataNode represents a node that stores file data chunks.
type DataNode struct {
	// ID of the data node, generated by the metadata service to
	// Keep track of which data nodes have which chunks
	// This ID will be used by the metadata service to determine which data nodes to send read requests to
	ID string
	// Map of chunk IDs to chunk data
	// For context, the chunk ID for files would be stored in the metadata service
	// When the client wants to read a file, it would get the chunk IDs from the metadata service
	// From there, it would request the chunk data from the data nodes
	Chunks map[string][]byte
}

// NewDataNode creates a new DataNode with the given ID
func NewDataNode(id string) *DataNode {
	return &DataNode{
		ID:     id,
		Chunks: make(map[string][]byte),
	}
}

// WriteChunk writes the given chunk data to the data node
func (d *DataNode) WriteChunk(chunkID string, data []byte) error {
	d.Chunks[chunkID] = data
	return nil
}

// ReadChunk reads the chunk data with the given chunk ID from the data node
func (d *DataNode) ReadChunk(chunkID string) ([]byte, error) {
	data, ok := d.Chunks[chunkID]
	if !ok {
		return nil, ErrChunkNotFound
	}
	return data, nil
}

// DeleteChunk deletes the chunk data with the given chunk ID from the data node
func (d *DataNode) DeleteChunk(chunkID string) error {
	delete(d.Chunks, chunkID)
	return nil
}
